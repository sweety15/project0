project0 : [MongoDB ,Pymongo]

dataset (structure)
Structure of 'restaurants' collection:
{
  "address": {
     "building": "1007",
     "coord": [ -73.856077, 40.848447 ],
     "street": "Morris Park Ave",
     "zipcode": "10462"
  },
  "borough": "Bronx",
  "cuisine": "Bakery",
  "grades": [
     { "date": { "$date": 1393804800000 }, "grade": "A", "score": 2 },
     { "date": { "$date": 1378857600000 }, "grade": "A", "score": 6 },
     { "date": { "$date": 1358985600000 }, "grade": "A", "score": 10 },
     { "date": { "$date": 1322006400000 }, "grade": "A", "score": 9 },
     { "date": { "$date": 1299715200000 }, "grade": "B", "score": 14 }
  ],
  "name": "Morris Park Bake Shop",
  "restaurant_id": "30075445"
}

Tasks:
Import the restaurants data into MongoDB.
	i) direct import (no code, using mongoimport)	- databaseA
	ii) using Python - PyMongo driver	        - databaseB
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure:

step 1: start the server using the command "C:\Program Files\MongoDB\Server\5.0\mongod"(path of mongodb) --dbpath="C:\data\db"
step 2: start the shell "C:\Program Files\MongoDB\Server\5.0\mongo"
step 3: import data file "C:\Program Files\MongoDB\Server\mongodb-database-tools\bin\mongoimport" --db products --collection zipcodes --typejson --file (filename)

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. Write a MongoDB query to display all the documents in the collection restaurants.
   
  Q) use customers
     db.getCollectionNames()
     db.zipcode.find()
     db.zipcode.find().pretty

2. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
   
   Q) db.zipcode.find({},{"_id":0,"address":0,"grades":0})
   
3. Write a MongoDB query to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
  
   Q) db.zipcode.find({},{"_id":0,"address":0,"grades":0})

4. Write a MongoDB query to display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.
  
   Q) db.zipcode.find({},{_id:0,name:1,borough:1,restaurant_id:1,"address.zipcode":1})

5. Write a MongoDB query to display all the restaurant which is in the borough Bronx.
  
   Q) db.zipcode.find({"borough" : "Bronx"}).pretty()

6. Write a MongoDB query to display the first 5 restaurant which is in the borough Bronx.
   
   Q) db.zipcode.find({"borough" : "Bronx"}).limit(5)

7.Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
  
   Q) db.zipcode.find({"borough" : "Bronx"}).skip(5).limit(5)

8. Write a MongoDB query to find the restaurants who achieved a score more than 90.
   
   Q) db.zipcode.find({"grades.score" : {"$gt" : 90}})

9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but less than 100.
   
 #  Q) db.zipcode.find({$and : [{"grades.score" : {"$gt" : 80}},{"grades.score" : {"$lt" : 100}}]}).pretty()
    Q)  db.zipcode.find({grades : { $elemMatch:{"score":{$gt : 80 , $lt :100}}}})


10. Write a MongoDB query to find the restaurants which locate in latitude value less than -95.754168.
   
   Q)db.zipcode.find({"address.coord.0" : {$lt : -95.754168}})

11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.
  
   Q)db.zipcode.find({$and : [{"cuisine" : {$ne : "American "}}, {"address.coord.0" : {$lt : -65.754168}}, {"grades.score" : {$gt : 70}}]})

12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.
Note : Do this query without using $and operator.
   
   Q)db.zipcode.find({"cuisine" : {$ne : "American "},"address.coord" : {$lt : -65.754168},"grades.score" : {$gt : 70}})

13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
   
   Q)db.zipcode.find({$and : [{"cuisine" : {$ne : "American "}}, {"grades.grade" : "A"}, {"borough" : {$ne : "Brooklyn "}}]}).sort({cuisine : -1})

14. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.
   
   Q)db.zipcode.find({"name" : { $regex: /^Wil/}}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

15. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.
   
   Q)db.zipcode.find({"name" : { $regex: /.ces/}}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

16. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.
   
   Q)db.zipcode.find({"name" : { $regex: /Reg/}}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

17. Write a MongoDB query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.
  
   Q)db.zipcode.find({borough: "Bronx", cuisine: {$in: ["American ","Chinese"]}}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

18. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.

   Q)db.zipcode.find({$or: [{"borough": "Staten Island"}, {"borough": "Bronxor Brooklyn"}, {"borough": "Queens"}]}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

19. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooh": "Bronxor Brooklyn"}, {"borough": "Queens"}]}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

   Q)db.zipcode.find( {borough: {$nin: ["Staten Island","Queens","Bronx","Brooklyn"]}} , {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

20. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.

   Q)db.zipcode.find({"grades.score": {$lte: 10}}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

21. Write a MongoDB query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.

   Q)db.zipcode.find({$nor: [{cuisine: {$in: ["American ","Chinese"]}},{name: /^Wil/}]},{_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..

   Q)db.zipcode.find({"grades" : {$elemMatch: {"date": ISODate("2014-08-11T00:00:00Z"), "grade":"A", "score":11}}}, {_id:0, restaurant_id:1, name:1, grades:1})

23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".

   Q)db.zipcode.find({$and: [{"grades.1.grade":"A"}, {"grades.1.score": 9}, {"grades.1.date": ISODate("2014-08-11T00:00:00Z")}]},{_id:0, restaurant_id:1, name:1, grades:1}).pretty()

24. Write a MongoDB query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52..

   Q)db.zipcode.find({$and : [{"address.coord.1": {$gt : 42}},{"address.coord.1": {$lte : 52}}]}, {_id:0, restaurant_id:1, name:1, address:1})

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along with all the columns.

   Q)db.zipcode.find({},{_id:0, name:1}).sort( {name: 1})

26. Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.

   Q)db.zipcode.find({},{_id:0, name:1}).sort( {name: -1})

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.

   Q)db.zipcode.find({}, {_id:0, cuisine:1, borough:1}).sort({cuisine: 1, borough: -1})

28. Write a MongoDB query to know whether all the addresses contains the street or not.
   
   Q)db.zipcode.find({"address.street" : {$exists : true}})

29. Write a MongoDB query which will select all documents in the restaurants collection where the coord field value is Double.
    Q)db.restaurants.find({"address.coord" :{$type : 1}})

30. Write a MongoDB query which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.
    Q)db.restaurants.find({"grades.score" :{$mod : [7,0]}},{"restaurant_id" : 1,"name":1,"grades":1})

31. Write a MongoDB query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.

    Q)db.zipcode.find({name: {$regex: /mon/}},{_id:0, name:1, borough:1, "address.coord":1, cuisine:1})
    Q)db.zipcode.find({name: {$regex: /mon/i}},{_id:0, name:1, borough:1, "address.coord":1, cuisine:1})  not for case sensitive

32. Write a MongoDB query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.

    Q)db.zipcode.find({name: {$regex: /^Mad/}},{_id:0, name:1, borough:1, "address.coord":1, cuisine:1})

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

ii)pymongo

from pymongo import MongoClient
from datetime import datetime
client=MongoClient()
db=client.customers
x=db.list_collection_names() #db.getcollection
#print(x)
zipcode=db.zipcode
import pprint


1 query to display all the documents in a collection 

for x in zipcode.find():
  print(x)

2 query display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant

for x in zipcode.find({},{"_id":0,"address":0,"grades":0}):
 print(x)

3 query display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.

for x in zipcode.find({},{"_id":0,"address":0,"grades":0}):
  print(x)

4 query display the fields restaurant_id, name, borough and zip code, but exclude the field _id for all the documents in the collection restaurant.

for x in zipcode.find({},{"_id":0,"name":1,"borough":1,"restaurant_id":1,"address.zipcode":1}):
  print(x)

5 query to display all the restaurant which is in the borough Bronx.

for x in zipcode.find({"borough":"Bronx"}):
 print(x)
 pprint.pprint(zipcode.find_one({"borough":"Bronx"}))

6 query to display the first 5 restaurant which is in the borough Bronx.

y=zipcode.find({"borough" : "Bronx"}).limit(5)
for x in zipcode.find({"borough" : "Bronx"}).limit(5):
    print(x)
    pprint.pprint(zipcode.find({"borough":"Bronx"}).limit(5))

7 query to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.

for x in zipcode.find({"borough" : "Bronx"}).skip(5).limit(5):
   print(x)

8 query to find the restaurants who achieved a score more than 90.

for x in zipcode.find({"grades.score" : {"$gt" : 90}}):
   print(x)

9 query to find the restaurants that achieved a score, more than 80 but less than 100. 

for x in zipcode.find({"grades" :{"$elemMatch":{"score":{"$gt" : 80 , "$lt" :100}}}}):
    print(x)

10 query to find the restaurants which locate in latitude value less than -95.754168.

for x in zipcode.find({"address.coord.0" : {"$lt" : -95.754168}}):
    print(x)

11 query to find the restaurants that do not prepare any cuisine of 'American' and their grade score more than 70 and latitude less than -65.754168.

for x in zipcode.find({"$and" : [{"cuisine" : {"$ne" : "American "}}, {"address.coord.0" : {"$lt" : -65.754168}}, {"grades.score" : {"$gt" : 70}}]}):
   print(x)

12 query to find the restaurants which do not prepare any cuisine of 'American' and achieved a score more than 70 and located in the longitude less than -65.754168.

for x in zipcode.find({"cuisine" : {"$ne" : "American "},"address.coord" : {"$lt" : -65.754168},"grades.score" : {"$gt" : 70}}):
    print(x)

13 query to find the restaurants which do not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.

for x in zipcode.find({"$and" : [{"cuisine" : {"$ne" : "American "}}, {"grades.grade" : "A"}, {"borough" : {"$ne" : "Brooklyn "}}]}).sort({"cuisine" : -1}):
  print(x)

14 query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Wil' as first three letters for its name.

for x in zipcode.find({"name" :{"$regex":"^Wil"}}, {"_id":0, "restaurant_id":1, "name":1, "borough":1, "cuisine":1}):
    print(x)

15 query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'ces' as last three letters for its name.

for x in zipcode.find({"name" : {"$regex":".ces"}}, {"_id":0, "restaurant_id":1, "name":1, "borough":1, "cuisine":1}):
    print(x)

16 query to find the restaurant Id, name, borough and cuisine for those restaurants which contain 'Reg' as three letters somewhere in its name.

for x in zipcode.find({"name" : {"$regex": "Reg"}}, {"_id":0, "restaurant_id":1, "name":1, "borough":1, "cuisine":1}):
   print(x)

17 query to find the restaurants which belong to the borough Bronx and prepared either American or Chinese dish.

for x in zipcode.find({"borough": "Bronx", "cuisine": {"$in": ["American ","Chinese"]}}, {"_id":0,"restaurant_id":1, "name":1, "borough":1, "cuisine":1}):
    print(x)
      
18 query to find the restaurant Id, name, borough and cuisine for those restaurants which belong to the borough Staten Island or Queens or Bronxor Brooklyn.

for x in zipcode.find({"$or": [{"borough": "Staten Island"}, {"borough": "Bronxor Brooklyn"}, {"borough": "Queens"}]}, {"_id":0, "restaurant_id":1, "name":1, "borough":1, "cuisine":1}):
     print(x)

19 query to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronxor Brooh": "Bronxor Brooklyn"}, {"borough": "Queens"}]}, {_id:0, restaurant_id:1, name:1, borough:1, cuisine:1})

for x in zipcode.find( {"borough": {"$in": ["Staten Island","Queens","Bronx","Brooklyn"]}} , {"_id":0, "restaurant_id":1, "name":1, "borough":1, "cuisine":1}):
    print(x)

20 query to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.

for x in zipcode.find({"grades.score": {"$lte": 10}}, {"_id":0, "restaurant_id":1, "name":1, "borough":1, "cuisine":1})
    print(x)

21 query to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.

for x in zipcode.find({"$nor": [{"cuisine": {"$in": ["American ","Chinese"]}},{"name": /^Wil/}]},{"_id":0, "restaurant_id":1, "name":1, "borough":1, "cuisine":1}):
    print(x)

22 query to find the restaurant Id, name, and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..

for x in zipcode.find({"grades" : {"$elemMatch": {"date": "ISODate"("2014-08-11T00:00:00Z"), "grade":"A", "score":11}}}, {"_id":0, "restaurant_id":1, "name":1, "grades":1}):
     print(x)

23 query to find the restaurant Id, name and grades for those restaurants where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate "2014-08-11T00:00:00Z".

for x in zipcode.find({"$and": [{"grades.1.grade":"A"}, {"grades.1.score": 9}, {"grades.1.date": "ISODate"("2014-08-11T00:00:00Z")}]},{"_id":0, "restaurant_id":1, "name":1, "grades":1}):
      print(x)

24 query to find the restaurant Id, name, address and geographical location for those restaurants where 2nd element of coord array contains a value which is more than 42 and upto 52..

for x in zipcode.find({"$and" : [{"address.coord.1": {"$gt" : 42}},{"address.coord.1": {"$lte" : 52}}]}, {"_id":0, "restaurant_id":1, "name":1, "address":1}):
    print(x)

25 query to arrange the name of the restaurants in ascending order along with all the columns.

for x in zipcode.find({},{"_id":0, "name":1}).sort([("name",1)]):
    print(x)

26  Write a MongoDB query to arrange the name of the restaurants in descending along with all the columns.

for x in zipcode.find({},{"_id":0, "name":1}).sort([("name",-1)]):
    print(x)

27 query to arranged the name of the cuisine in ascending order and for that same cuisine borough should be in descending order.

for x in zipcode.find({}, {"_id":0, "cuisine":1, "borough":1}).sort([("borough",-1),("cuisine",1)]):
    print(x)

28 query to know whether all the addresses contains the street or not.

for x in zipcode.find({"address.street" : { "$exists" : "true" } } ):
    print(x)

29 query which will select all documents in the restaurants collection where the coord field value is Double.

for x in zipcode.find({"address.coord" :{"$type": 1}}):
    print(x)

31 query to find the restaurant name, borough, longitude and attitude and cuisine for those restaurants which contains 'mon' as three letters somewhere in its name.

for x in zipcode.find({"name": {"$regex": "mon"}},{"_id":0, "name":1, "borough":1, "address.coord":1, "cuisine":1}):
    print(x)

32 query to find the restaurant name, borough, longitude and latitude and cuisine for those restaurants which contain 'Mad' as first three letters of its name.

for x in zipcode.find({"name": {"$regex":"^Mad"}},{"_id":0, "name":1, "borough":1, "address.coord":1, "cuisine":1}):
    print(x)









